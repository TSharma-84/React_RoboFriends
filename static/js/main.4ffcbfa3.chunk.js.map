{"version":3,"sources":["components/Card.js","components/cardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardArray","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobot","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","cardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAeeA,EAbF,SAAAC,GAAmB,IAAjBC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GACzB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kDAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA4BP,EAA5B,mBAEpBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCaMS,EAlBG,SAAAX,GAAe,IAAZY,EAAYZ,EAAZY,OACrB,OACER,EAAAC,EAAAC,cAAA,WAECM,EAAOC,IAAI,SAACC,EAAKC,GACjB,OACAX,EAAAC,EAAAC,cAACU,EAAD,CACEC,IAAK,CAACF,GAAGZ,GACTA,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCHPgB,EATG,SAAAlB,GAA+BA,EAA7BmB,YAA6B,IAAjBC,EAAiBpB,EAAjBoB,aAC/B,OAAQhB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCMPI,EAVA,SAACC,GACf,OAECrB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MAAMmB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UACpFJ,EAAMK,WC0CKC,qBAxCd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaDI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAACtB,YAAaqB,EAAME,OAAOC,SAbzCX,EAAKY,MAAQ,CACZhC,OAAQ,GACRO,YAAY,IAJDa,mFAOQ,IAAAa,EAAAV,KACnBW,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC7B,OAAOsC,uCAQhC,IAAAC,EAAAhB,KACDiB,EAAgBjB,KAAKS,MAAMhC,OAAOyC,OAAO,SAAAC,GAC9C,OAAQA,EAAMrD,KAAKsD,cAAcC,SAASL,EAAKP,MAAMzB,YAAYoC,iBAElE,OAAgC,IAA7BpB,KAAKS,MAAMhC,OAAO6C,OACbrD,EAAAC,EAAAC,cAAA,qBAIPF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAW,UAAf,gBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWnD,UAAW,SAASa,aAAgBe,KAAKI,iBAEpDnC,EAAAC,EAAAC,cAACqD,EAAD,KACCvD,EAAAC,EAAAC,cAACsD,EAAD,CAAWhD,OAAUwC,aAjCTS,oBCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.4ffcbfa3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id})=>{\r\n\treturn(\r\n\t\t<div className = 'tc bg-light-blue dib br3 ma2 pa3 grow shadow-3' >\r\n\t\t\t<img alt='robots' src = {`https://robohash.org/${id}?size=200x200`}/>\r\n\r\n\t\t\t\t<div >\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t  );\r\n\t}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardArray = ({ robots }) =>{\r\nreturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t robots.map((user,i) =>{\r\n\t\t\treturn(\r\n\t\t\t<Card \r\n\t\t\t\t key={[i].id} \r\n\t\t\t\t id={robots[i].id} \r\n\t\t\t\t name={robots[i].name} \r\n\t\t\t\t email={robots[i].email} />);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CardArray;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField,searchChange}) =>{\r\n\treturn (<div>\r\n\t\t\t\t\t<input type='search' \r\n\t\t  \t\t \t\t   placeholder='Find Robo Friends' \r\n\t\t  \t\t \t\t   onChange={searchChange}/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n\treturn(\r\n\r\n\t\t<div className = 'mt2' style={{overflowY: 'scroll', border:'1px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\t\r\n\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardArray from '../components/cardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField:''\r\n\t\t}\r\n\t}\r\n\t\tcomponentDidMount() {\r\n\t\t\tfetch('https://jsonplaceholder.typicode.com/users') \r\n\t\t\t\t.then(response=>response.json())\r\n\t\t\t\t.then(users => this.setState({robots:users}));\r\n\t\t\r\n\t\t} \r\n\t\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchField: event.target.value})\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst filteredRobot = this.state.robots.filter(robot =>{\r\n\t\t\treturn  robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n   \t\t })\r\n\t\tif(this.state.robots.length === 0){\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t\t<div className = 'tc'>\r\n\t\t\t\t\t<h1 className ='f1 mb1'>Robo Friends</h1>\r\n\t\t\t\t\t<SearchBox className ='f1 mb2' searchChange = {this.onSearchChange} />\r\n\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardArray robots = {filteredRobot}/>\t\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t\r\n\t\t\t</div>);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}